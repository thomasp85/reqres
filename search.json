[{"path":[]},{"path":"https://reqres.data-imaginist.com/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://reqres.data-imaginist.com/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://reqres.data-imaginist.com/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://reqres.data-imaginist.com/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://reqres.data-imaginist.com/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://reqres.data-imaginist.com/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://reqres.data-imaginist.com/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://reqres.data-imaginist.com/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://reqres.data-imaginist.com/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://reqres.data-imaginist.com/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://reqres.data-imaginist.com/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://reqres.data-imaginist.com/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Thomas Lin Pedersen. Maintainer, author.","code":""},{"path":"https://reqres.data-imaginist.com/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pedersen T (2025). reqres: Powerful Classes HTTP Requests Responses. R package version 0.2.5.9000, https://github.com/thomasp85/reqres#reqres, https://reqres.data-imaginist.com.","code":"@Manual{,   title = {reqres: Powerful Classes for HTTP Requests and Responses},   author = {Thomas Lin Pedersen},   year = {2025},   note = {R package version 0.2.5.9000, https://github.com/thomasp85/reqres#reqres},   url = {https://reqres.data-imaginist.com}, }"},{"path":"https://reqres.data-imaginist.com/index.html","id":"reqres-","dir":"","previous_headings":"","what":"Powerful Classes for HTTP Requests and Responses","title":"Powerful Classes for HTTP Requests and Responses","text":"http protocol rather basic essence, can pain work . reqres soothe pain somewhat providing two powerful classes handling parts request response handling http exchange. web server, instead focuses making life easier developers web servers extracting complexity cookies, headers, content negotiation, likes neat little classes. reqres builds upon rook specifications thus well suited httpuv-based webservers.","code":""},{"path":"https://reqres.data-imaginist.com/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Powerful Classes for HTTP Requests and Responses","text":"reqres draws lot inspiration express.js Request Response classes aiming feature parity express. Request class provides automatic parsing query string along parsing body based Content-Type header (decompression Content-Encoding provided). , provides content negotiation based Accept(-*) headers. Response class allows set headers cookies easily, assign arbitrary data later use, automatically format body based content negotiation Request object responding (, compress automatically Accept-Encoding header allows ). part content negotiation fails correct response status code set, making response ready send. reqres comes range parsers formatters making work box json, xml, html, csv, tab, multipart, www-form-urlencoded payloads. easy either modify provide parsers formatters needed - reqres take care content negotiation simply call custom parser/formatter chosen.","code":""},{"path":"https://reqres.data-imaginist.com/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Powerful Classes for HTTP Requests and Responses","text":"reqrescan installed CRAN install.packages('reqres') development version can installed github:","code":"# install.packages('devtools') devtools::install_github('thomasp85/reqres')"},{"path":"https://reqres.data-imaginist.com/index.html","id":"demo","dir":"","previous_headings":"","what":"Demo","title":"Powerful Classes for HTTP Requests and Responses","text":"quick demo features reqres. uses fake_request() fiery mock rook request can used without setting webserver:","code":"library(reqres)  # We start by mocking our request rook <- fiery::fake_request(     url = 'http://www.example.com/summary?id=2347&user=Thomas+Lin+Pedersen',     content = '{\"name\":[\"Thomas Lin Pedersen\"],\"age\":[31],\"homepage\":[\"www.data-imaginist.com\",\"www.github.com/thomasp85\"]}',     headers = list(         Content_Type = 'application/json',         Accept = 'application/json, application/xml; q=0.5, text/*; q=0.3',         Accept_Encoding = 'gzip, br'     ) )  # A Request object can now be created req <- Request$new(rook) req #> A HTTP request #> ============== #> Trusted: No #>  Method: get #>     URL: http://www.example.com:80/summary?id=2347&user=Thomas+Lin+Pedersen  # ... along with a response res <- req$respond() res #> A HTTP response #> =============== #>         Status: 404 - Not Found #>   Content type: text/plain #>  #> In response to: http://www.example.com:80/summary?id=2347&user=Thomas+Lin+Pedersen"},{"path":"https://reqres.data-imaginist.com/index.html","id":"request","dir":"","previous_headings":"Demo","what":"Request","title":"Powerful Classes for HTTP Requests and Responses","text":"lot information already available, query parts url, body filled automatically. body can easily parsed though, long parser exists provided content type. Instead inspecting manually can simply provide range parsers let object choose correct one case none provided parsers fits content type, response automatically get updated correct error code facilitate reqres comes mapping standard mime types provided parsers. can simply supplied parse method","code":"req$host #> [1] \"www.example.com:80\" req$query #> $id #> [1] 2347 #>  #> $user #> [1] \"Thomas Lin Pedersen\" req$body #> NULL req$is('json') #> [1] TRUE req$parse(json = parse_json()) #> [1] TRUE req$body #> $name #> [1] \"Thomas Lin Pedersen\" #>  #> $age #> [1] 31 #>  #> $homepage #> [1] \"www.data-imaginist.com\"   \"www.github.com/thomasp85\" req$set_body(NULL) req$parse(     txt = parse_plain(),     html = parse_html(),     json = parse_json() ) #> [1] TRUE req$body #> $name #> [1] \"Thomas Lin Pedersen\" #>  #> $age #> [1] 31 #>  #> $homepage #> [1] \"www.data-imaginist.com\"   \"www.github.com/thomasp85\" req$set_body(NULL) req$parse(txt = parse_plain()) #> [1] FALSE res #> A HTTP response #> =============== #>         Status: 415 - Unsupported Media Type #>   Content type: text/plain #>  #> In response to: http://www.example.com:80/summary?id=2347&user=Thomas+Lin+Pedersen req$set_body(NULL) req$parse(default_parsers) #> [1] TRUE req$body #> $name #> [1] \"Thomas Lin Pedersen\" #>  #> $age #> [1] 31 #>  #> $homepage #> [1] \"www.data-imaginist.com\"   \"www.github.com/thomasp85\""},{"path":"https://reqres.data-imaginist.com/index.html","id":"response","dir":"","previous_headings":"Demo","what":"Response","title":"Powerful Classes for HTTP Requests and Responses","text":"request mainly intended read , response written . Response class contains slew methods easily set headers, cookies, etc. Furthermore, contains data store arbitrary information can stored pass middleware etc. data never part actual response. Files can attached marked download, setting relevant headers automatically Often need provide payload form body. can type R object response handed server, either string raw vector. Based Accept header request can formatted correctly thus making ready send back client. request contains Accept-Encoding header compressed well. content negotiation understands wildcards well default formatter mapping exists parallel default_parsers Request$format() method. easy define formatters add along defaults","code":"res$set_header('Date', to_http_date(Sys.time())) res$get_header('Date') #> [1] \"Wed, 29 Jan 2025 14:16:46 GMT\" res$set_cookie('user', req$query$id, max_age = 9000L) res$has_cookie('user') #> [1] TRUE res$set_data('alphabet', letters) res$get_data('alphabet') #>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" #> [20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\" res$attach(system.file('NEWS.md', package = 'reqres')) res$get_header('Content-Type') #> [1] \"text/markdown\" res$get_header('Content-Disposition') #> [1] \"attachment; filename=NEWS.md\" res$remove_header('Content-Disposition') res$body <- head(mtcars) res$body #>                    mpg cyl disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2 #> Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1 res$format(json = format_json()) #> [1] TRUE res$body #>   [1] 1f 8b 08 00 00 00 00 00 00 03 9d d2 41 4f 83 30 14 07 f0 af 42 de b9 69 da #>  [26] 47 29 a5 e7 1d bc 78 d1 44 4d 8c 31 dd 20 48 b2 01 16 36 a2 c6 ef 6e d9 a0 #>  [51] 6c 63 4b d4 db 4b d3 f6 fd de bf 7d fe 82 4d 9d 83 46 4e 60 f5 b1 06 2d 09 #>  [76] a4 45 53 83 e6 92 11 78 eb 0b ee 8a d4 9a 16 74 48 13 02 9d 2b 90 4a 24 f0 #> [101] de 64 ab 7e 23 15 ee d4 ae 01 ed 36 9a 8d 5b 21 90 67 c6 82 16 ee 52 63 97 #> [126] fb e2 d5 56 1d 68 b8 35 9f a9 09 ee 9e 04 7c 93 ff f6 56 71 e4 9b c7 94 e1 #> [151] df 9b 07 8f 26 3f 02 b8 2b 07 82 f0 04 a6 0e 84 24 9c 04 2a 1a 09 e1 34 be #> [176] a2 92 1f 04 fc 9a 80 7b c1 c2 b4 cd b6 0c 62 ce 8e e7 a7 e2 3c 01 8c d4 85 #> [201] 04 7a 53 b7 af 90 4f 11 24 54 88 13 00 1b 01 e1 1c 70 53 d9 32 6b 03 11 2c #> [226] 6c b1 cb 26 84 1b 23 1e 10 6a 44 84 fe 19 fa c0 47 04 8f 46 44 df f6 da 33 #> [251] cc 0d 78 6e b8 af 2b db 9a 65 b5 6d 4f 18 b3 df 80 18 0d 0c e6 19 48 63 e9 #> [276] 19 72 64 20 a3 88 bf 8e e2 c1 ac 0b 53 ba e6 2f 3f 40 6a d7 44 06 03 00 00 res$get_header('Content-Type') #> [1] \"application/json\" res$get_header('Content-Encoding') #> [1] \"gzip\" res$body <- head(mtcars) req$get_header('Accept') #> [1] \"application/json\"       \"application/xml; q=0.5\" \"text/*; q=0.3\" res$format(csv = format_table(sep = ','), compress = FALSE) #> [1] TRUE res$body #> [1] \"\\\"mpg\\\",\\\"cyl\\\",\\\"disp\\\",\\\"hp\\\",\\\"drat\\\",\\\"wt\\\",\\\"qsec\\\",\\\"vs\\\",\\\"am\\\",\\\"gear\\\",\\\"carb\\\"\\n\\\"Mazda RX4\\\",21,6,160,110,3.9,2.62,16.46,0,1,4,4\\n\\\"Mazda RX4 Wag\\\",21,6,160,110,3.9,2.875,17.02,0,1,4,4\\n\\\"Datsun 710\\\",22.8,4,108,93,3.85,2.32,18.61,1,1,4,1\\n\\\"Hornet 4 Drive\\\",21.4,6,258,110,3.08,3.215,19.44,1,0,3,1\\n\\\"Hornet Sportabout\\\",18.7,8,360,175,3.15,3.44,17.02,0,0,3,2\\n\\\"Valiant\\\",18.1,6,225,105,2.76,3.46,20.22,1,0,3,1\" res$get_header('Content-Type') #> [1] \"text/csv\" res$body <- head(mtcars) res$format(default_formatters, compress = FALSE) #> [1] TRUE res$body #> [{\"mpg\":21,\"cyl\":6,\"disp\":160,\"hp\":110,\"drat\":3.9,\"wt\":2.62,\"qsec\":16.46,\"vs\":0,\"am\":1,\"gear\":4,\"carb\":4,\"_row\":\"Mazda RX4\"},{\"mpg\":21,\"cyl\":6,\"disp\":160,\"hp\":110,\"drat\":3.9,\"wt\":2.875,\"qsec\":17.02,\"vs\":0,\"am\":1,\"gear\":4,\"carb\":4,\"_row\":\"Mazda RX4 Wag\"},{\"mpg\":22.8,\"cyl\":4,\"disp\":108,\"hp\":93,\"drat\":3.85,\"wt\":2.32,\"qsec\":18.61,\"vs\":1,\"am\":1,\"gear\":4,\"carb\":1,\"_row\":\"Datsun 710\"},{\"mpg\":21.4,\"cyl\":6,\"disp\":258,\"hp\":110,\"drat\":3.08,\"wt\":3.215,\"qsec\":19.44,\"vs\":1,\"am\":0,\"gear\":3,\"carb\":1,\"_row\":\"Hornet 4 Drive\"},{\"mpg\":18.7,\"cyl\":8,\"disp\":360,\"hp\":175,\"drat\":3.15,\"wt\":3.44,\"qsec\":17.02,\"vs\":0,\"am\":0,\"gear\":3,\"carb\":2,\"_row\":\"Hornet Sportabout\"},{\"mpg\":18.1,\"cyl\":6,\"disp\":225,\"hp\":105,\"drat\":2.76,\"wt\":3.46,\"qsec\":20.22,\"vs\":1,\"am\":0,\"gear\":3,\"carb\":1,\"_row\":\"Valiant\"}] res$body <- head(mtcars) res$format('text/yaml' = yaml::as.yaml, compress = FALSE) #> [1] TRUE res$body #> [1] \"mpg:\\n- 21.0\\n- 21.0\\n- 22.8\\n- 21.4\\n- 18.7\\n- 18.1\\ncyl:\\n- 6.0\\n- 6.0\\n- 4.0\\n- 6.0\\n- 8.0\\n- 6.0\\ndisp:\\n- 160.0\\n- 160.0\\n- 108.0\\n- 258.0\\n- 360.0\\n- 225.0\\nhp:\\n- 110.0\\n- 110.0\\n- 93.0\\n- 110.0\\n- 175.0\\n- 105.0\\ndrat:\\n- 3.9\\n- 3.9\\n- 3.85\\n- 3.08\\n- 3.15\\n- 2.76\\nwt:\\n- 2.62\\n- 2.875\\n- 2.32\\n- 3.215\\n- 3.44\\n- 3.46\\nqsec:\\n- 16.46\\n- 17.02\\n- 18.61\\n- 19.44\\n- 17.02\\n- 20.22\\nvs:\\n- 0.0\\n- 0.0\\n- 1.0\\n- 1.0\\n- 0.0\\n- 1.0\\nam:\\n- 1.0\\n- 1.0\\n- 1.0\\n- 0.0\\n- 0.0\\n- 0.0\\ngear:\\n- 4.0\\n- 4.0\\n- 4.0\\n- 3.0\\n- 3.0\\n- 3.0\\ncarb:\\n- 4.0\\n- 4.0\\n- 1.0\\n- 1.0\\n- 2.0\\n- 1.0\\n\""},{"path":"https://reqres.data-imaginist.com/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Powerful Classes for HTTP Requests and Responses","text":"Please note ‘reqres’ project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":null,"dir":"Reference","previous_headings":"","what":"HTTP Request Handling — Request","title":"HTTP Request Handling — Request","text":"HTTP Request Handling HTTP Request Handling","code":""},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP Request Handling — Request","text":"","code":"as.Request(x, ...)  is.Request(x)"},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP Request Handling — Request","text":"x object coercible Request. ... Parameters passed Request$new()","code":""},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"HTTP Request Handling — Request","text":"Request object (.Request()) logical indicating whether object Request (.Request())","code":""},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"HTTP Request Handling — Request","text":"class wraps functionality related extracting information http request. Much functionality inspired Request class Express.js, documentation complement document. reqres build top Rook specifications Request object initialized Rook-compliant object. often request object provided httpuv framework. needed, original Rook object always accessible can modified, though modifications propagate derived values Request object (e.g. changing HTTP_HOST element Rook object change host field Request object). , direct manipulation Rook object generally discouraged.","code":""},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"initialization","dir":"Reference","previous_headings":"","what":"Initialization","title":"HTTP Request Handling — Request","text":"new 'Request'-object initialized using new() method generator: Usage","code":""},{"path":[]},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"HTTP Request Handling — Request","text":"trust logical indicating whether request trusted. Mutable method string indicating request method (lower case, e.g. 'get', 'put', etc.). Immutable body object holding body request. empty string default needs populated using set_body() method (often done using body parser accesses Rook$input stream). Immutable cookies Access named list cookies request. URI decoded. Immutable headers Access named list headers request. order follow R variable naming standards - substituted _. Use get_header() method lookup based correct header name. Immutable host Return domain server given \"Host\" header trust == FALSE. trust == true returns X-Forwarded-Host instead. Immutable ip Returns remote address request trust == FALSE. trust == TRUE instead return first value X-Forwarded-header. Immutable ips trust == TRUE return full list ips X-Forwarded-header. trust == FALSE return empty vector. Immutable protocol Returns protocol (e.g. 'http') used request. trust == TRUE use value X-Forwarded-Proto header. Immutable root mount point application receiving request. Can empty application mounted server root. Immutable path part url following root. Defines local target request (independent mounted). Immutable url full URL request. Immutable query query string request (anything following \"?\" URL) parsed named list. query url decoded \"+\" substituted space. Multiple queries expected separated either \"&\" \"|\". Immutable query_delim delimiter used specifying multiple values query. NULL queries expected contain multiple key-value pairs key order provide array, e.g. ?arg1=3&arg1=7. setting \",\"\", \"|\", \" \" array can provided single key-value pair, e.g. ?arg1=3|7 querystring unparsed query string request, including \"?\". query string exists \"\" rather \"?\" xhr logical indicating whether X-Requested-header equals XMLHttpRequest thus indicating request performed using JavaScript library jQuery. Immutable secure logical indicating whether request performed using secure connection, .e. protocol == 'https'. Immutable origin original object used create Request object. reqres currently works rook always return original rook object. Immutable, though content rook object might manipulated environment. response Response object created request accessible field. Immutable","code":""},{"path":[]},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"HTTP Request Handling — Request","text":"Request$new() Request$print() Request$set_body() Request$set_cookies() Request$accepts() Request$accepts_charsets() Request$accepts_encoding() Request$accepts_language() Request$() Request$get_header() Request$respond() Request$parse() Request$parse_raw() Request$as_message() Request$clone()","code":""},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"HTTP Request Handling — Request","text":"Create new request rook object","code":""},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP Request Handling — Request","text":"","code":"Request$new(rook, trust = FALSE)"},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP Request Handling — Request","text":"rook rook object base request trust request trusted blindly. TRUE X-Forwarded-* headers returned querying host, ip, protocol","code":""},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"HTTP Request Handling — Request","text":"Pretty printing object","code":""},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP Request Handling — Request","text":"","code":"Request$print(...)"},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP Request Handling — Request","text":"... ignored","code":""},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"method-set-body-","dir":"Reference","previous_headings":"","what":"Method set_body()","title":"HTTP Request Handling — Request","text":"Sets content request body. method mainly used concert body parser reads rook$input stream","code":""},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP Request Handling — Request","text":"","code":"Request$set_body(content)"},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP Request Handling — Request","text":"content R object representing body request","code":""},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"method-set-cookies-","dir":"Reference","previous_headings":"","what":"Method set_cookies()","title":"HTTP Request Handling — Request","text":"Sets cookies request. cookies automatically parsed populated, method mainly available facilitate cookie signing encryption","code":""},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP Request Handling — Request","text":"","code":"Request$set_cookies(cookies)"},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP Request Handling — Request","text":"cookies named list cookie values","code":""},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"method-accepts-","dir":"Reference","previous_headings":"","what":"Method accepts()","title":"HTTP Request Handling — Request","text":"Given vector response content types returns preferred one based Accept header.","code":""},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP Request Handling — Request","text":"","code":"Request$accepts(types)"},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP Request Handling — Request","text":"types vector types","code":""},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"method-accepts-charsets-","dir":"Reference","previous_headings":"","what":"Method accepts_charsets()","title":"HTTP Request Handling — Request","text":"Given vector possible character encodings returns preferred one based Accept-Charset header.","code":""},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP Request Handling — Request","text":"","code":"Request$accepts_charsets(charsets)"},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP Request Handling — Request","text":"charsets vector charsets","code":""},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"method-accepts-encoding-","dir":"Reference","previous_headings":"","what":"Method accepts_encoding()","title":"HTTP Request Handling — Request","text":"Given vector possible content encodings (usually compression algorithms) selects preferred one based Accept-Encoding header. match return \"identity\" signaling compression.","code":""},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP Request Handling — Request","text":"","code":"Request$accepts_encoding(encoding)"},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP Request Handling — Request","text":"encoding vector encoding names","code":""},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"method-accepts-language-","dir":"Reference","previous_headings":"","what":"Method accepts_language()","title":"HTTP Request Handling — Request","text":"Given vector possible content languages selects best one based Accept-Language header.","code":""},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP Request Handling — Request","text":"","code":"Request$accepts_language(language)"},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP Request Handling — Request","text":"language vector languages","code":""},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"method-is-","dir":"Reference","previous_headings":"","what":"Method is()","title":"HTTP Request Handling — Request","text":"Queries whether body request given format looking Content-Type header. Used selecting best parsing method.","code":""},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP Request Handling — Request","text":"","code":"Request$is(type)"},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP Request Handling — Request","text":"type content type check ","code":""},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"method-get-header-","dir":"Reference","previous_headings":"","what":"Method get_header()","title":"HTTP Request Handling — Request","text":"Get header specified name.","code":""},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP Request Handling — Request","text":"","code":"Request$get_header(name)"},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP Request Handling — Request","text":"name name header get","code":""},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"method-respond-","dir":"Reference","previous_headings":"","what":"Method respond()","title":"HTTP Request Handling — Request","text":"Creates new Response object request","code":""},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP Request Handling — Request","text":"","code":"Request$respond()"},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"method-parse-","dir":"Reference","previous_headings":"","what":"Method parse()","title":"HTTP Request Handling — Request","text":"Based provided parsers selects appropriate one looking Content-Type header assigns result request body. parser function accepting raw vector, named list additional directives, returns R object kind (parser knows input plain text, simply wrap rawToChar()). body compressed, decompressed based Content-Encoding header prior passing parser. See parsers list pre-supplied parsers. Parsers either supplied named list named arguments parse method. names correspond mime types known file extensions. autofail = TRUE response set correct error code parsing fails. parse() returns TRUE parsing successful FALSE ","code":""},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP Request Handling — Request","text":"","code":"Request$parse(..., autofail = TRUE)"},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP Request Handling — Request","text":"... named set parser functions autofail Automatically populate response parsing fails","code":""},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"method-parse-raw-","dir":"Reference","previous_headings":"","what":"Method parse_raw()","title":"HTTP Request Handling — Request","text":"simpler version parse() method. attempt decompress body set body field resulting raw vector. server decide handle payload. returns TRUE successful FALSE otherwise.","code":""},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP Request Handling — Request","text":"","code":"Request$parse_raw(autofail = TRUE)"},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"arguments-12","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP Request Handling — Request","text":"autofail Automatically populate response parsing fails","code":""},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"method-as-message-","dir":"Reference","previous_headings":"","what":"Method as_message()","title":"HTTP Request Handling — Request","text":"Prints HTTP representation request output stream.","code":""},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP Request Handling — Request","text":"","code":"Request$as_message()"},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"HTTP Request Handling — Request","text":"objects class cloneable method.","code":""},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP Request Handling — Request","text":"","code":"Request$clone(deep = FALSE)"},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"arguments-13","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP Request Handling — Request","text":"deep Whether make deep clone.","code":""},{"path":"https://reqres.data-imaginist.com/reference/Request.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HTTP Request Handling — Request","text":"","code":"fake_rook <- fiery::fake_request(   'http://example.com/test?id=34632&question=who+is+hadley',   content = 'This is an elaborate ruse',   headers = list(     Accept = 'application/json; text/*',     Content_Type = 'text/plain'   ) )  req <- Request$new(fake_rook)  # Get full URL req$url #> [1] \"http://example.com:80/test?id=34632&question=who+is+hadley\"  # Get list of query parameters req$query #> $id #> [1] \"34632\" #>  #> $question #> [1] \"who is hadley\" #>   # Test if content is text req$is('txt') #> [1] TRUE  # Perform content negotiation for the response req$accepts(c('html', 'json', 'txt')) #> [1] \"json\"  # Cleaning up connections rm(fake_rook, req) gc() #>           used (Mb) gc trigger (Mb) max used  (Mb) #> Ncells 1121768   60    2189071  117  2189071 117.0 #> Vcells 2095145   16    8388608   64  3098152  23.7"},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":null,"dir":"Reference","previous_headings":"","what":"HTTP Response handling — Response","title":"HTTP Response handling — Response","text":"HTTP Response handling HTTP Response handling","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP Response handling — Response","text":"","code":"# S3 method for class 'Response' as.list(x, ...)  is.Response(x)"},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP Response handling — Response","text":"x Response object ... Ignored","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"HTTP Response handling — Response","text":"rook-compliant list-response (case .list()) logical indicating whether object Response (case .Response())","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"HTTP Response handling — Response","text":"class handles functionality involved crafting http response. Much functionality inspired Request class Express.js, documentation complement document. reqres build top Rook specifications Response object can converted compliant list object passed e.g. httpuv handler. Response object always created response Request object contains reference originating Request object. Response always initialized 404 Found code, empty string body Content-Type header set text/plain. Content-Type header required httpuv function, inferred missing converting list. body raw vector set application/octet-stream otherwise set text/plain. always advised consciously set Content-Type header though. exception attaching standard file type inferred file extension automatically. Unless body raw vector automatically converted character vector collapsed single string \"\\n\" separating individual elements Response object converted list (, body can exist type object moment Response object converted list). facilitate communication different middleware Response object contains data store information can stored lifetime response.","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"initialization","dir":"Reference","previous_headings":"","what":"Initialization","title":"HTTP Response handling — Response","text":"new 'Response'-object initialized using new() method generator: Usage often provided request using respond() method, provide response, creating one exist Usage Arguments","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"HTTP Response handling — Response","text":"following fields accessible Response object: status Gets sets status code response. initialised 404L body Set get body response. character vector single element named 'file' interpreted location file. better use file field creating response referencing file automatically set correct headers. file Set get location file used body response. body referencing file (contains something else) return NULL. Content-Type header automatically inferred file extension, known. unknown defaults application/octet-stream. file extension text/plain. Existence file checked. type Get sets Content-Type header response based file extension mime-type. request Get original Request object object responding .","code":""},{"path":[]},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"HTTP Response handling — Response","text":"status Gets sets status code response. initialised 404L body Set get body response. character vector single element named 'file' interpreted location file. better use file field creating response referencing file automatically set correct headers. file Set get location file used body response. body referencing file (contains something else) return NULL. Content-Type header automatically inferred file extension, known. unknown defaults application/octet-stream. file extension text/plain. Existence file checked. type Get sets Content-Type header response based file extension mime-type. request Get original Request object object responding .","code":""},{"path":[]},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"HTTP Response handling — Response","text":"Response$new() Response$print() Response$set_header() Response$get_header() Response$remove_header() Response$has_header() Response$append_header() Response$set_data() Response$get_data() Response$remove_data() Response$has_data() Response$timestamp() Response$attach() Response$status_with_text() Response$set_cookie() Response$remove_cookie() Response$has_cookie() Response$set_links() Response$format() Response$compress() Response$content_length() Response$as_list() Response$as_message() Response$clone()","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"HTTP Response handling — Response","text":"Create new response Request object","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP Response handling — Response","text":"","code":"Response$new(request)"},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP Response handling — Response","text":"request Request object Response responding ","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"HTTP Response handling — Response","text":"Pretty printing object","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP Response handling — Response","text":"","code":"Response$print(...)"},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP Response handling — Response","text":"... ignored","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"method-set-header-","dir":"Reference","previous_headings":"","what":"Method set_header()","title":"HTTP Response handling — Response","text":"Sets header given name. value converted character. header added element value. Use append_header() setting headers without overwriting existing ones.","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP Response handling — Response","text":"","code":"Response$set_header(name, value)"},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP Response handling — Response","text":"name name header set value value assign header","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"method-get-header-","dir":"Reference","previous_headings":"","what":"Method get_header()","title":"HTTP Response handling — Response","text":"Returns header(s) given name","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP Response handling — Response","text":"","code":"Response$get_header(name)"},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP Response handling — Response","text":"name name header retrieve value ","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"method-remove-header-","dir":"Reference","previous_headings":"","what":"Method remove_header()","title":"HTTP Response handling — Response","text":"Removes headers given name","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP Response handling — Response","text":"","code":"Response$remove_header(name)"},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP Response handling — Response","text":"name name header remove","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"method-has-header-","dir":"Reference","previous_headings":"","what":"Method has_header()","title":"HTTP Response handling — Response","text":"Test existence header given name","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP Response handling — Response","text":"","code":"Response$has_header(name)"},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP Response handling — Response","text":"name name header look ","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"method-append-header-","dir":"Reference","previous_headings":"","what":"Method append_header()","title":"HTTP Response handling — Response","text":"Adds additional header given name value given value. header exist yet created.","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP Response handling — Response","text":"","code":"Response$append_header(name, value)"},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP Response handling — Response","text":"name name header append value value assign header","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"method-set-data-","dir":"Reference","previous_headings":"","what":"Method set_data()","title":"HTTP Response handling — Response","text":"Adds value internal data store stores key","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP Response handling — Response","text":"","code":"Response$set_data(key, value)"},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP Response handling — Response","text":"key identifier data set value R object","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"method-get-data-","dir":"Reference","previous_headings":"","what":"Method get_data()","title":"HTTP Response handling — Response","text":"Retrieves data stored key internal data store.","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP Response handling — Response","text":"","code":"Response$get_data(key)"},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP Response handling — Response","text":"key identifier data wish retrieve","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"method-remove-data-","dir":"Reference","previous_headings":"","what":"Method remove_data()","title":"HTTP Response handling — Response","text":"Removes data stored key internal data store.","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP Response handling — Response","text":"","code":"Response$remove_data(key)"},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP Response handling — Response","text":"key identifier data wish remove","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"method-has-data-","dir":"Reference","previous_headings":"","what":"Method has_data()","title":"HTTP Response handling — Response","text":"Queries whether data store entry given key","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP Response handling — Response","text":"","code":"Response$has_data(key)"},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP Response handling — Response","text":"key identifier data wish look ","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"method-timestamp-","dir":"Reference","previous_headings":"","what":"Method timestamp()","title":"HTTP Response handling — Response","text":"Set Date header current time","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP Response handling — Response","text":"","code":"Response$timestamp()"},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"method-attach-","dir":"Reference","previous_headings":"","what":"Method attach()","title":"HTTP Response handling — Response","text":"Sets body file given file marks response download setting Content-Disposition attachment; filename=<filename>. Use type argument overwrite automatic type inference file extension.","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP Response handling — Response","text":"","code":"Response$attach(file, filename = basename(file), type = NULL)"},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"arguments-12","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP Response handling — Response","text":"file path file filename name file appear client type file type. given inferred","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"method-status-with-text-","dir":"Reference","previous_headings":"","what":"Method status_with_text()","title":"HTTP Response handling — Response","text":"Sets status code sets body associated status code description (e.g. Bad Gateway 502L)","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP Response handling — Response","text":"","code":"Response$status_with_text(code)"},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"arguments-13","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP Response handling — Response","text":"code status code set","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"method-set-cookie-","dir":"Reference","previous_headings":"","what":"Method set_cookie()","title":"HTTP Response handling — Response","text":"Sets cookie response. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie longer description","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP Response handling — Response","text":"","code":"Response$set_cookie(   name,   value,   encode = TRUE,   expires = NULL,   http_only = NULL,   max_age = NULL,   path = NULL,   secure = NULL,   same_site = NULL )"},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"arguments-14","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP Response handling — Response","text":"name name cookie value value cookie encode value url encoded expires POSIXct object given expiration time cookie http_only cookie readable browser max_age number seconds elapse cookie expires path URL path cookie related secure cookie send https same_site Either \"Lax\" \"Strict\" indicating whether cookie can send cross-site requests","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"method-remove-cookie-","dir":"Reference","previous_headings":"","what":"Method remove_cookie()","title":"HTTP Response handling — Response","text":"Removes cookie named name response.","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP Response handling — Response","text":"","code":"Response$remove_cookie(name)"},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"arguments-15","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP Response handling — Response","text":"name name cookie remove","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"method-has-cookie-","dir":"Reference","previous_headings":"","what":"Method has_cookie()","title":"HTTP Response handling — Response","text":"Queries whether response contains cookie named name","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"usage-16","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP Response handling — Response","text":"","code":"Response$has_cookie(name)"},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"arguments-16","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP Response handling — Response","text":"name name cookie look ","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"method-set-links-","dir":"Reference","previous_headings":"","what":"Method set_links()","title":"HTTP Response handling — Response","text":"Sets Link header based named arguments passed .... names used rel directive.","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"usage-17","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP Response handling — Response","text":"","code":"Response$set_links(...)"},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"arguments-17","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP Response handling — Response","text":"... key-value pairs links","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"method-format-","dir":"Reference","previous_headings":"","what":"Method format()","title":"HTTP Response handling — Response","text":"Based formatters passed ... content negotiation performed request preferred formatter chosen. Content-Type header set automatically. compress = TRUE compress() method called formatting. error encountered autofail = TRUE response set 500. formatter found autofail = TRUE response set 406. formatting successful return TRUE, return FALSE","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"usage-18","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP Response handling — Response","text":"","code":"Response$format(..., autofail = TRUE, compress = TRUE)"},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"arguments-18","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP Response handling — Response","text":"... range formatters autofail Automatically populate response formatting fails compress $compress() run end","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"method-compress-","dir":"Reference","previous_headings":"","what":"Method compress()","title":"HTTP Response handling — Response","text":"Based provided priority, encoding negotiated request applied. Content-Encoding header set chosen compression algorithm.","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"usage-19","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP Response handling — Response","text":"","code":"Response$compress(priority = c(\"gzip\", \"deflate\", \"br\", \"identity\"))"},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"arguments-19","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP Response handling — Response","text":"priority vector compression types ranked servers priority","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"method-content-length-","dir":"Reference","previous_headings":"","what":"Method content_length()","title":"HTTP Response handling — Response","text":"Calculates length (bytes) body. number goes Content-Length header. Note Content-Length header set automatically httpuv method called response size needed reasons.","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"usage-20","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP Response handling — Response","text":"","code":"Response$content_length()"},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"method-as-list-","dir":"Reference","previous_headings":"","what":"Method as_list()","title":"HTTP Response handling — Response","text":"Converts object list processing Rook compliant server httpuv. set Content-Type header missing convert non-raw body single character string.","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"usage-21","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP Response handling — Response","text":"","code":"Response$as_list()"},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"method-as-message-","dir":"Reference","previous_headings":"","what":"Method as_message()","title":"HTTP Response handling — Response","text":"Prints HTTP representation response output stream.","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"usage-22","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP Response handling — Response","text":"","code":"Response$as_message()"},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"HTTP Response handling — Response","text":"objects class cloneable method.","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"usage-23","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP Response handling — Response","text":"","code":"Response$clone(deep = FALSE)"},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"arguments-20","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP Response handling — Response","text":"deep Whether make deep clone.","code":""},{"path":"https://reqres.data-imaginist.com/reference/Response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HTTP Response handling — Response","text":"","code":"fake_rook <- fiery::fake_request(   'http://example.com/test?id=34632&question=who+is+hadley',   content = 'This is elaborate ruse',   headers = list(     Accept = 'application/json; text/*',     Content_Type = 'text/plain'   ) )  req <- Request$new(fake_rook) res <- Response$new(req) res #> A HTTP response #> =============== #>         Status: 404 - Not Found #>   Content type: text/plain #>  #> In response to: http://example.com:80/test?id=34632&question=who+is+hadley  # Set the body to the associated status text res$status_with_text(200L) res$body #> [1] \"OK\"  # Infer Content-Type from file extension res$type <- 'json' res$type #> [1] \"application/json\"  # Prepare a file for download res$attach(system.file('DESCRIPTION', package = 'reqres')) res$type #> [1] \"text/plain\" res$body #>                                                 file  #> \"/home/runner/work/_temp/Library/reqres/DESCRIPTION\"  res$get_header('Content-Disposition') #> [1] \"attachment; filename=DESCRIPTION\"  # Cleaning up connections rm(fake_rook, req, res) gc() #>           used (Mb) gc trigger (Mb) max used  (Mb) #> Ncells 1139065 60.9    2189071  117  2189071 117.0 #> Vcells 2134134 16.3    8388608   64  3098152  23.7"},{"path":"https://reqres.data-imaginist.com/reference/default_formatters.html","id":null,"dir":"Reference","previous_headings":"","what":"A list of default formatter mappings — default_formatters","title":"A list of default formatter mappings — default_formatters","text":"list matches normal mime types respective formatters using default arguments. -frills request parsing can supplied directly Response$format(). add modify list simply supply additional parsers second, third, etc, argument overwrite add depending whether specifies mime type already present.","code":""},{"path":"https://reqres.data-imaginist.com/reference/default_formatters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A list of default formatter mappings — default_formatters","text":"","code":"default_formatters"},{"path":[]},{"path":"https://reqres.data-imaginist.com/reference/default_formatters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A list of default formatter mappings — default_formatters","text":"","code":"if (FALSE) { # \\dontrun{ res$format(default_formatters, 'text/plain' = format_plain(sep = ' ')) } # }"},{"path":"https://reqres.data-imaginist.com/reference/default_parsers.html","id":null,"dir":"Reference","previous_headings":"","what":"A list of default parser mappings — default_parsers","title":"A list of default parser mappings — default_parsers","text":"list matches normal mime types respective parsers using default arguments. -frills request parsing can supplied directly Request$parse(). add modify list simply supply additional parsers second, third, etc, argument overwrite add depending whether specifies mime type already present.","code":""},{"path":"https://reqres.data-imaginist.com/reference/default_parsers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A list of default parser mappings — default_parsers","text":"","code":"default_parsers"},{"path":[]},{"path":"https://reqres.data-imaginist.com/reference/default_parsers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A list of default parser mappings — default_parsers","text":"","code":"if (FALSE) { # \\dontrun{ req$parse(default_parsers, 'application/json' = parse_json(flatten = TRUE)) } # }"},{"path":"https://reqres.data-imaginist.com/reference/formatters.html","id":null,"dir":"Reference","previous_headings":"","what":"Pre-supplied formatting generators — formatters","title":"Pre-supplied formatting generators — formatters","text":"set functions can used construct formatting functions adhering Response$format() requirements.","code":""},{"path":"https://reqres.data-imaginist.com/reference/formatters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pre-supplied formatting generators — formatters","text":"","code":"format_json(   dataframe = \"rows\",   matrix = \"rowmajor\",   Date = \"ISO8601\",   POSIXt = \"string\",   factor = \"string\",   complex = \"string\",   raw = \"base64\",   null = \"list\",   na = \"null\",   auto_unbox = FALSE,   digits = 4,   pretty = FALSE,   force = FALSE )  format_plain(sep = \"\\n\")  format_xml(encoding = \"UTF-8\", options = \"as_xml\")  format_html(encoding = \"UTF-8\", options = \"as_html\")  format_table(...)"},{"path":"https://reqres.data-imaginist.com/reference/formatters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pre-supplied formatting generators — formatters","text":"dataframe encode data.frame objects: must one 'rows', 'columns' 'values' matrix encode matrices higher dimensional arrays: must one 'rowmajor' 'columnmajor'. Date encode Date objects: must one 'ISO8601' 'epoch' POSIXt encode POSIXt (datetime) objects: must one 'string', 'ISO8601', 'epoch' 'mongo' factor encode factor objects: must one 'string' 'integer' complex encode complex numbers: must one 'string' 'list' raw encode raw objects: must one 'base64', 'hex' 'mongo' null encode NULL values within list: must one 'null' 'list' na print NA values: must one 'null' 'string'. Defaults class specific auto_unbox automatically unbox() atomic vectors length 1. usually safer avoid instead use unbox() function unbox individual elements. exception objects class AsIs (.e. wrapped ()) automatically unboxed. way mark single values length-1 arrays. digits max number decimal digits print numeric values. Use () specify significant digits. Use NA max precision. pretty adds indentation whitespace JSON output. Can TRUE/FALSE number specifying number spaces indent. See prettify() force unclass/skip objects classes defined JSON mapping sep line separator. Plain text split multiple strings based . encoding character encoding use document. default encoding ‘UTF-8’. Available encodings specified http://xmlsoft.org/html/libxml-encoding.html#xmlCharEncoding. options default: ‘format’. Zero format Format output no_declaration Drop XML declaration no_empty_tags Remove empty tags no_xhtml Disable XHTML1 rules require_xhtml Force XHTML rules as_xml Force XML output as_html Force HTML output format_whitespace Format non-significant whitespace ... parameters passed write.table()","code":""},{"path":"https://reqres.data-imaginist.com/reference/formatters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pre-supplied formatting generators — formatters","text":"function accepting R object","code":""},{"path":[]},{"path":"https://reqres.data-imaginist.com/reference/formatters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pre-supplied formatting generators — formatters","text":"","code":"fake_rook <- fiery::fake_request(   'http://example.com/test',   content = '',   headers = list(     Content_Type = 'text/plain',     Accept = 'application/json, text/csv'   ) )  req <- Request$new(fake_rook) res <- req$respond() res$body <- mtcars res$format(json = format_json(), csv = format_table(sep=',')) #> [1] TRUE res$body #> [{\"mpg\":21,\"cyl\":6,\"disp\":160,\"hp\":110,\"drat\":3.9,\"wt\":2.62,\"qsec\":16.46,\"vs\":0,\"am\":1,\"gear\":4,\"carb\":4,\"_row\":\"Mazda RX4\"},{\"mpg\":21,\"cyl\":6,\"disp\":160,\"hp\":110,\"drat\":3.9,\"wt\":2.875,\"qsec\":17.02,\"vs\":0,\"am\":1,\"gear\":4,\"carb\":4,\"_row\":\"Mazda RX4 Wag\"},{\"mpg\":22.8,\"cyl\":4,\"disp\":108,\"hp\":93,\"drat\":3.85,\"wt\":2.32,\"qsec\":18.61,\"vs\":1,\"am\":1,\"gear\":4,\"carb\":1,\"_row\":\"Datsun 710\"},{\"mpg\":21.4,\"cyl\":6,\"disp\":258,\"hp\":110,\"drat\":3.08,\"wt\":3.215,\"qsec\":19.44,\"vs\":1,\"am\":0,\"gear\":3,\"carb\":1,\"_row\":\"Hornet 4 Drive\"},{\"mpg\":18.7,\"cyl\":8,\"disp\":360,\"hp\":175,\"drat\":3.15,\"wt\":3.44,\"qsec\":17.02,\"vs\":0,\"am\":0,\"gear\":3,\"carb\":2,\"_row\":\"Hornet Sportabout\"},{\"mpg\":18.1,\"cyl\":6,\"disp\":225,\"hp\":105,\"drat\":2.76,\"wt\":3.46,\"qsec\":20.22,\"vs\":1,\"am\":0,\"gear\":3,\"carb\":1,\"_row\":\"Valiant\"},{\"mpg\":14.3,\"cyl\":8,\"disp\":360,\"hp\":245,\"drat\":3.21,\"wt\":3.57,\"qsec\":15.84,\"vs\":0,\"am\":0,\"gear\":3,\"carb\":4,\"_row\":\"Duster 360\"},{\"mpg\":24.4,\"cyl\":4,\"disp\":146.7,\"hp\":62,\"drat\":3.69,\"wt\":3.19,\"qsec\":20,\"vs\":1,\"am\":0,\"gear\":4,\"carb\":2,\"_row\":\"Merc 240D\"},{\"mpg\":22.8,\"cyl\":4,\"disp\":140.8,\"hp\":95,\"drat\":3.92,\"wt\":3.15,\"qsec\":22.9,\"vs\":1,\"am\":0,\"gear\":4,\"carb\":2,\"_row\":\"Merc 230\"},{\"mpg\":19.2,\"cyl\":6,\"disp\":167.6,\"hp\":123,\"drat\":3.92,\"wt\":3.44,\"qsec\":18.3,\"vs\":1,\"am\":0,\"gear\":4,\"carb\":4,\"_row\":\"Merc 280\"},{\"mpg\":17.8,\"cyl\":6,\"disp\":167.6,\"hp\":123,\"drat\":3.92,\"wt\":3.44,\"qsec\":18.9,\"vs\":1,\"am\":0,\"gear\":4,\"carb\":4,\"_row\":\"Merc 280C\"},{\"mpg\":16.4,\"cyl\":8,\"disp\":275.8,\"hp\":180,\"drat\":3.07,\"wt\":4.07,\"qsec\":17.4,\"vs\":0,\"am\":0,\"gear\":3,\"carb\":3,\"_row\":\"Merc 450SE\"},{\"mpg\":17.3,\"cyl\":8,\"disp\":275.8,\"hp\":180,\"drat\":3.07,\"wt\":3.73,\"qsec\":17.6,\"vs\":0,\"am\":0,\"gear\":3,\"carb\":3,\"_row\":\"Merc 450SL\"},{\"mpg\":15.2,\"cyl\":8,\"disp\":275.8,\"hp\":180,\"drat\":3.07,\"wt\":3.78,\"qsec\":18,\"vs\":0,\"am\":0,\"gear\":3,\"carb\":3,\"_row\":\"Merc 450SLC\"},{\"mpg\":10.4,\"cyl\":8,\"disp\":472,\"hp\":205,\"drat\":2.93,\"wt\":5.25,\"qsec\":17.98,\"vs\":0,\"am\":0,\"gear\":3,\"carb\":4,\"_row\":\"Cadillac Fleetwood\"},{\"mpg\":10.4,\"cyl\":8,\"disp\":460,\"hp\":215,\"drat\":3,\"wt\":5.424,\"qsec\":17.82,\"vs\":0,\"am\":0,\"gear\":3,\"carb\":4,\"_row\":\"Lincoln Continental\"},{\"mpg\":14.7,\"cyl\":8,\"disp\":440,\"hp\":230,\"drat\":3.23,\"wt\":5.345,\"qsec\":17.42,\"vs\":0,\"am\":0,\"gear\":3,\"carb\":4,\"_row\":\"Chrysler Imperial\"},{\"mpg\":32.4,\"cyl\":4,\"disp\":78.7,\"hp\":66,\"drat\":4.08,\"wt\":2.2,\"qsec\":19.47,\"vs\":1,\"am\":1,\"gear\":4,\"carb\":1,\"_row\":\"Fiat 128\"},{\"mpg\":30.4,\"cyl\":4,\"disp\":75.7,\"hp\":52,\"drat\":4.93,\"wt\":1.615,\"qsec\":18.52,\"vs\":1,\"am\":1,\"gear\":4,\"carb\":2,\"_row\":\"Honda Civic\"},{\"mpg\":33.9,\"cyl\":4,\"disp\":71.1,\"hp\":65,\"drat\":4.22,\"wt\":1.835,\"qsec\":19.9,\"vs\":1,\"am\":1,\"gear\":4,\"carb\":1,\"_row\":\"Toyota Corolla\"},{\"mpg\":21.5,\"cyl\":4,\"disp\":120.1,\"hp\":97,\"drat\":3.7,\"wt\":2.465,\"qsec\":20.01,\"vs\":1,\"am\":0,\"gear\":3,\"carb\":1,\"_row\":\"Toyota Corona\"},{\"mpg\":15.5,\"cyl\":8,\"disp\":318,\"hp\":150,\"drat\":2.76,\"wt\":3.52,\"qsec\":16.87,\"vs\":0,\"am\":0,\"gear\":3,\"carb\":2,\"_row\":\"Dodge Challenger\"},{\"mpg\":15.2,\"cyl\":8,\"disp\":304,\"hp\":150,\"drat\":3.15,\"wt\":3.435,\"qsec\":17.3,\"vs\":0,\"am\":0,\"gear\":3,\"carb\":2,\"_row\":\"AMC Javelin\"},{\"mpg\":13.3,\"cyl\":8,\"disp\":350,\"hp\":245,\"drat\":3.73,\"wt\":3.84,\"qsec\":15.41,\"vs\":0,\"am\":0,\"gear\":3,\"carb\":4,\"_row\":\"Camaro Z28\"},{\"mpg\":19.2,\"cyl\":8,\"disp\":400,\"hp\":175,\"drat\":3.08,\"wt\":3.845,\"qsec\":17.05,\"vs\":0,\"am\":0,\"gear\":3,\"carb\":2,\"_row\":\"Pontiac Firebird\"},{\"mpg\":27.3,\"cyl\":4,\"disp\":79,\"hp\":66,\"drat\":4.08,\"wt\":1.935,\"qsec\":18.9,\"vs\":1,\"am\":1,\"gear\":4,\"carb\":1,\"_row\":\"Fiat X1-9\"},{\"mpg\":26,\"cyl\":4,\"disp\":120.3,\"hp\":91,\"drat\":4.43,\"wt\":2.14,\"qsec\":16.7,\"vs\":0,\"am\":1,\"gear\":5,\"carb\":2,\"_row\":\"Porsche 914-2\"},{\"mpg\":30.4,\"cyl\":4,\"disp\":95.1,\"hp\":113,\"drat\":3.77,\"wt\":1.513,\"qsec\":16.9,\"vs\":1,\"am\":1,\"gear\":5,\"carb\":2,\"_row\":\"Lotus Europa\"},{\"mpg\":15.8,\"cyl\":8,\"disp\":351,\"hp\":264,\"drat\":4.22,\"wt\":3.17,\"qsec\":14.5,\"vs\":0,\"am\":1,\"gear\":5,\"carb\":4,\"_row\":\"Ford Pantera L\"},{\"mpg\":19.7,\"cyl\":6,\"disp\":145,\"hp\":175,\"drat\":3.62,\"wt\":2.77,\"qsec\":15.5,\"vs\":0,\"am\":1,\"gear\":5,\"carb\":6,\"_row\":\"Ferrari Dino\"},{\"mpg\":15,\"cyl\":8,\"disp\":301,\"hp\":335,\"drat\":3.54,\"wt\":3.57,\"qsec\":14.6,\"vs\":0,\"am\":1,\"gear\":5,\"carb\":8,\"_row\":\"Maserati Bora\"},{\"mpg\":21.4,\"cyl\":4,\"disp\":121,\"hp\":109,\"drat\":4.11,\"wt\":2.78,\"qsec\":18.6,\"vs\":1,\"am\":1,\"gear\":4,\"carb\":2,\"_row\":\"Volvo 142E\"}]   # Cleaning up connections rm(fake_rook, req, res) gc() #>           used (Mb) gc trigger (Mb) max used  (Mb) #> Ncells 1148126 61.4    2189071  117  2189071 117.0 #> Vcells 2151652 16.5    8388608   64  3098152  23.7"},{"path":"https://reqres.data-imaginist.com/reference/http_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Format timestamps to match the HTTP specs — to_http_date","title":"Format timestamps to match the HTTP specs — to_http_date","text":"Dates/times HTTP headers needs specific format valid, furthermore always given GMT time. two functions aids converting back forth required format.","code":""},{"path":"https://reqres.data-imaginist.com/reference/http_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format timestamps to match the HTTP specs — to_http_date","text":"","code":"to_http_date(time, format = NULL)  from_http_date(time)"},{"path":"https://reqres.data-imaginist.com/reference/http_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format timestamps to match the HTTP specs — to_http_date","text":"time string object coercible POSIXct format case time POSIXct object specification string interpreted.","code":""},{"path":"https://reqres.data-imaginist.com/reference/http_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format timestamps to match the HTTP specs — to_http_date","text":"to_http_date() returns properly formatted string, from_http_date() returns POSIXct object","code":""},{"path":"https://reqres.data-imaginist.com/reference/http_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format timestamps to match the HTTP specs — to_http_date","text":"","code":"time <- to_http_date(Sys.time()) time #> [1] \"Fri, 31 Jan 2025 13:41:07 GMT\" from_http_date(time) #> [1] \"2025-01-31 13:41:07 GMT\""},{"path":"https://reqres.data-imaginist.com/reference/parsers.html","id":null,"dir":"Reference","previous_headings":"","what":"Pre-supplied parsing generators — parsers","title":"Pre-supplied parsing generators — parsers","text":"set functions can used construct parsing functions adhering Request$parse() requirements.","code":""},{"path":"https://reqres.data-imaginist.com/reference/parsers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pre-supplied parsing generators — parsers","text":"","code":"parse_json(   simplifyVector = TRUE,   simplifyDataFrame = simplifyVector,   simplifyMatrix = simplifyVector,   flatten = FALSE )  parse_plain(sep = \"\\n\")  parse_xml(encoding = \"\", options = \"NOBLANKS\", base_url = \"\")  parse_html(   encoding = \"\",   options = c(\"RECOVER\", \"NOERROR\", \"NOBLANKS\"),   base_url = \"\" )  parse_multiform()  parse_queryform(delim = NULL)  parse_table(...)"},{"path":"https://reqres.data-imaginist.com/reference/parsers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pre-supplied parsing generators — parsers","text":"simplifyVector coerce JSON arrays containing primitives atomic vector simplifyDataFrame coerce JSON arrays containing records (JSON objects) data frame simplifyMatrix coerce JSON arrays containing vectors equal mode dimension matrix array flatten automatically flatten() nested data frames single non-nested data frame sep line separator. Plain text split multiple strings based . encoding Specify default encoding document. Unless otherwise specified XML documents assumed UTF-8 UTF-16. document UTF-8/16, lacks explicit encoding directive, allows supply default. options Set parsing options libxml2 parser. Zero RECOVER recover errors NOENT substitute entities DTDLOAD load external subset DTDATTR default DTD attributes DTDVALID validate DTD NOERROR suppress error reports NOWARNING suppress warning reports PEDANTIC pedantic error reporting NOBLANKS remove blank nodes SAX1 use SAX1 interface internally XINCLUDE Implement XInclude substitition NONET Forbid network access NODICT reuse context dictionary NSCLEAN remove redundant namespaces declarations NOCDATA merge CDATA text nodes NOXINCNODE generate XINCLUDE START/END nodes COMPACT compact small text nodes; modification tree allowed afterwards (possibly crash try modify tree) OLD10 parse using XML-1.0 update 5 NOBASEFIX fixup XINCLUDE xml:base uris HUGE relax hardcoded limit parser OLDSAX parse using SAX2 interface 2.7.0 IGNORE_ENC ignore internal document encoding hint BIG_LINES Store big lines numbers text PSVI field base_url loading connection, raw vector literal html/xml, allows specify base url document. Base urls used turn relative urls absolute urls. delim delimiter use parsing arrays non-exploded form. Either NULL (delimiter) one \",\", \"|\", \" \" ... parameters passed read.table()","code":""},{"path":"https://reqres.data-imaginist.com/reference/parsers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pre-supplied parsing generators — parsers","text":"function accepting raw vector named list directives","code":""},{"path":[]},{"path":"https://reqres.data-imaginist.com/reference/parsers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pre-supplied parsing generators — parsers","text":"","code":"fake_rook <- fiery::fake_request(   'http://example.com/test',   content = '[1, 2, 3, 4]',   headers = list(     Content_Type = 'application/json'   ) )  req <- Request$new(fake_rook) req$parse(json = parse_json()) #> [1] TRUE req$body #> [1] 1 2 3 4  # Cleaning up connections rm(fake_rook, req) gc() #>           used (Mb) gc trigger (Mb) max used  (Mb) #> Ncells 1150516 61.5    2189071  117  2189071 117.0 #> Vcells 2156705 16.5    8388608   64  3098152  23.7"},{"path":"https://reqres.data-imaginist.com/reference/query_parser.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a query string — query_parser","title":"Parse a query string — query_parser","text":"function facilitates parsing querystrings, either URL POST PUT body Content-Type set application/x-www-form-urlencoded.","code":""},{"path":"https://reqres.data-imaginist.com/reference/query_parser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a query string — query_parser","text":"","code":"query_parser(query = NULL, delim = NULL)"},{"path":"https://reqres.data-imaginist.com/reference/query_parser.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a query string — query_parser","text":"query query single string delim Optional delimiter array values. omitted expected arrays provided exploded form (e.g. arg1=3&arg1=7)","code":""},{"path":"https://reqres.data-imaginist.com/reference/query_parser.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse a query string — query_parser","text":"named list giving keys values query. Values fron key combined given multiple times","code":""},{"path":"https://reqres.data-imaginist.com/reference/query_parser.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse a query string — query_parser","text":"","code":"# Using delimiter to provide array query_parser(\"?name=Thomas%20Lin%20Pedersen&numbers=1 2 3\", delim = \" \") #> $name #> [1] \"Thomas Lin Pedersen\" #>  #> $numbers #> [1] \"1\" \"2\" \"3\" #>   # No delimiter (exploded form) query_parser(\"?name=Thomas%20Lin%20Pedersen&numbers=1&numbers=2&numbers=3\") #> $name #> [1] \"Thomas Lin Pedersen\" #>  #> $numbers #> [1] \"1\" \"2\" \"3\" #>"},{"path":"https://reqres.data-imaginist.com/reference/reqres-package.html","id":null,"dir":"Reference","previous_headings":"","what":"reqres: Powerful Classes for HTTP Requests and Responses — reqres-package","title":"reqres: Powerful Classes for HTTP Requests and Responses — reqres-package","text":"order facilitate parsing http requests creating appropriate responses package provides two classes handle lot housekeeping involved working http exchanges. infrastructure builds upon 'rook' specification thus well suited combined 'httpuv' based web servers.","code":""},{"path":[]},{"path":"https://reqres.data-imaginist.com/reference/reqres-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"reqres: Powerful Classes for HTTP Requests and Responses — reqres-package","text":"Maintainer: Thomas Lin Pedersen thomasp85@gmail.com (ORCID)","code":""},{"path":"https://reqres.data-imaginist.com/news/index.html","id":"reqres-development-version","dir":"Changelog","previous_headings":"","what":"reqres (development version)","title":"reqres (development version)","text":"Use rlang native type checking instead assertthat Avoid request parsing needed (ever) Fix bug resulted unintentional splitting headers containing date-times (#11) Improved query parsing properly handles various forms array notation (exploded non-exploded different delimiters). BREAKING: query values longer automatically type converted parsing lead loss information. DEPRECATED: Request$parse(), Response$set_links(), Response$format() soft deprecated passing list values first element. Instead use !!! splicing","code":""},{"path":"https://reqres.data-imaginist.com/news/index.html","id":"reqres-025","dir":"Changelog","previous_headings":"","what":"reqres 0.2.5","title":"reqres 0.2.5","text":"CRAN release: 2022-08-19 General upkeep Fix bug whith unnamed cookies (#12)","code":""},{"path":"https://reqres.data-imaginist.com/news/index.html","id":"reqres-023","dir":"Changelog","previous_headings":"","what":"reqres 0.2.3","title":"reqres 0.2.3","text":"CRAN release: 2019-10-02 Fixed bug Cookie parsing cookie strings include = Added pkgdown site https://reqres.data-imaginist.com","code":""},{"path":"https://reqres.data-imaginist.com/news/index.html","id":"reqres-022","dir":"Changelog","previous_headings":"","what":"reqres 0.2.2","title":"reqres 0.2.2","text":"CRAN release: 2018-11-12 Fixed bug querystring parsing first key retain ?","code":""},{"path":"https://reqres.data-imaginist.com/news/index.html","id":"reqres-021","dir":"Changelog","previous_headings":"","what":"reqres 0.2.1","title":"reqres 0.2.1","text":"CRAN release: 2017-10-25 Added querystring field Request. Added calculate_length() method Response. Added as_message() method Request Response.","code":""},{"path":"https://reqres.data-imaginist.com/news/index.html","id":"reqres-020","dir":"Changelog","previous_headings":"","what":"reqres 0.2.0","title":"reqres 0.2.0","text":"CRAN release: 2017-08-12 Moved shallow dependency Rook, making easier substitute expand request formats Added content negotiation body parsing formatting","code":""},{"path":"https://reqres.data-imaginist.com/news/index.html","id":"reqres-010","dir":"Changelog","previous_headings":"","what":"reqres 0.1.0","title":"reqres 0.1.0","text":"Migrated Request Response classes routr","code":""}]
